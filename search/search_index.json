{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Getting Started","text":"<p>This plugin is inspired by the procedural map generation algorithm used in the <code>Enter The Gungeon</code> game, designed to create unique map patterns for each level with predefined rooms.</p>"},{"location":"#example-of-a-map-from-enter-the-gungeon","title":"Example of a Map from Enter The Gungeon","text":"<p>The plugin recognizes three types of rooms</p> <ol> <li>Normal Room: Features a single entrance and exit.</li> <li>Large Room: Contains one entrance and multiple exits (at least 2, with no fixed maximum).</li> <li>No Exit Room: Has an entrance but no exits.</li> </ol>"},{"location":"#how-it-works","title":"How It Works","text":"<ul> <li>The map generation process begins with a random selection of predefined rooms. Despite the rooms being predefined, the random sequence of room spawning, inclusion of Large Rooms, and corridor patterns ensure a fresh experience in each game session.</li> <li>Rooms are spawned based on their predefined entrance and exit locations, with the map starting at the player's start map and concluding with a boss room.</li> <li>In cases where a Large Room is selected (featuring multiple exits), the algorithm initiates branching. For more details on branching, see Branching and Large Room.</li> <li>Overlaps with other rooms, corridors, or specified blocks can occur during room spawning. For more information, refer to Overlaps.</li> </ul>"},{"location":"#plugin-structure","title":"Plugin Structure","text":"<p>The plugin package includes three main types: <code>ProceduralGen</code>, <code>RoomActor</code>, and <code>DoorActor</code> (a specialized form of RoomActor), designed for maximum flexibility.</p>"},{"location":"#roomactor","title":"RoomActor","text":"<p>A Room Actor is composed of three components, demonstrated in the <code>ProceduralMapGeneration Content -&gt; ProceduralMapGeneration -&gt; ETGRooms -&gt; Room1</code> path:</p> <ul> <li><code>DoorSocketEnter</code>: Indicates the room's starting and pivot point.</li> <li><code>DoorSocketExit</code>: Marks the room's ending point.</li> <li><code>Box Component</code>: Encompasses the entire room. The box's dimensions must be multiples of the Tile size, with TileSizeX &amp; TileSizeY given 16 as default.</li> </ul> <p>Critical Note: The pivot origin of all rooms must be positioned at <code>DoorSocketEnter</code>.</p>"},{"location":"#setting-the-pivot-point","title":"Setting the Pivot Point","text":"<ol> <li>In the Components tab, select all components using <code>CTRL + A</code>.</li> <li>Adjust the gizmo to align with the <code>Door Socket Enter</code>. This ensures rooms spawn at the correct location.</li> </ol>"},{"location":"#configuring-enter-and-exit-directions","title":"Configuring Enter and Exit Directions","text":"<p>For example, if <code>DoorSocketEnter</code> is positioned at the top, indicating the entrance, and <code>DoorSocketExit</code> at the right, indicating the exit, set the <code>Door Enter Socket Direction</code> to <code>Vertical Up</code> and the <code>Door Exit Socket Direction</code> to <code>Horizontal Right</code>. This setup is essential for the algorithm to correctly select and spawn rooms.</p> <p></p> <p></p>"},{"location":"#procedural-gen","title":"Procedural Gen","text":"<p>This actor configures the settings for the procedural map generation algorithm. For detailed attribute information, refer to the references.</p>"},{"location":"#algorithm-overview","title":"Algorithm Overview","text":"<p>If the plugin operates outside debugging mode (with <code>Debug Room Sequence</code> and <code>Block Room Locations</code> empty), the following steps occur:</p> <ul> <li>A room is randomly selected from the Room Designs.</li> <li>Rooms are sequentially spawned at the exit socket of the preceding room, continuing until the specified Number of Rooms is reached.</li> <li>If overlap occurs during room spawning, the overlapped room will move away from previous room's exit socket location and a corridor path will be constructed to connect two rooms .</li> <li>If a <code>Large Room</code> is selected, the algorithm initiates branching and only terminates with <code>NoExit</code> rooms. For more details on branching, see branching.</li> </ul>"},{"location":"#final-steps","title":"Final Steps","text":"<p>Tile indexes are selectable via Command Prompts, with editor widgets available to simplify room configuration. Refer to Slate Editor for guidance.</p> <p>Before generating maps, ensure all prerequisites are met by consulting the Essential Checklist. Rooms and configurations in the content browser are provided for reference.</p>"},{"location":"BranchingAndLargeRoom/","title":"Branching","text":"<p>Branching plays a crucial role in ensuring the uniqueness of map generation. This section uses a large room as an example to illustrate the concept.</p> <p></p> <p>In the components section, the <code>Door Socket Enter</code> is positioned at the leftmost part of the room, with <code>Door Socket Exit</code> placed rightmost exit point. Additional scene components like <code>Down2</code>, <code>Down1</code>, and <code>Up</code> are manually created and located at their respective exit points.</p>"},{"location":"BranchingAndLargeRoom/#configuration-details-in-variables-tab","title":"Configuration Details in Variables Tab","text":"<ul> <li>Exclusion Arrays: Specified by <code>\"SceneCompName\"_Exclude</code> arrays, these exclude tiles relative to the scene component's location. For instance, <code>Up_Exclude</code> will exclude tiles at the top exit of the room.</li> <li>Offset Arrays: <code>\"SceneCompName\"_Offset</code> arrays adjust the exclusion arrays' positions. <code>Up_Offset</code> modifies the Up_Exclude indexes.</li> </ul> <p>Manual configuration of blocking tiles is tedious; utilizing Editor Tools is recommended for a more efficient process.</p>"},{"location":"BranchingAndLargeRoom/#room-properties","title":"Room Properties","text":"<ul> <li>Mark the room as <code>LargeRoom</code> in the room actor's details pane under Large Room. If unchecked, the room will not function as a large room.</li> <li>For new scene components in a large room, set the component's direction via tags in the detail pane:<ul> <li>StraightUp for Vertical Up</li> <li>StraightDown for Vertical Down</li> <li>SideRight for Horizontal Right</li> <li>SideLeft for Horizontal Left</li> </ul> </li> </ul> <p>The following image will be used for the given examples. Visualizations can be turned on or off.</p> <p></p>"},{"location":"BranchingAndLargeRoom/#branching-mechanics","title":"Branching Mechanics","text":"<ul> <li>Number of Rooms: Specifies the count of normal rooms. For example, with <code>Number of Rooms</code> set to 2, additional branch rooms can spawn without counting towards this total. In given map configuration, only Room1, Room11 will be spawned. Max Side Branch Room property will account for total spawned branch rooms.</li> <li>Branch Length: Determines the amount of room to spawn for each branch, allowing for varied and unique map shapes with even a single LargeRoom.</li> </ul> <p>Each initiated branch terminates with a NoExit room, which has an entrance but no exits. The NoExit room's NoExit property must be checked, and its <code>Door Socket Enter</code> correctly set.</p> <p></p> <p>If the initial branch location is unable to spawn, room branch will not be initiated and room's <code>NoExit</code> door will be spawned.</p> <p></p> <ul> <li>For optimal results, clear the Debug Room Sequence and Block Room Locations</li> <li>Adjust the Number of Rooms, Max Large Room Count, and Max Side Branch Room to suitable values, keeping in mind that too high values for Max Large Room Count and Branch Length compared Number Of Rooms are not recommended.</li> </ul>"},{"location":"BranchingAndLargeRoom/#branching-examples","title":"Branching Examples","text":"<p>Some branching example for this given configurations </p> <p>If more unique rooms with different branch points are given, it's possible to create much unique and different map patterns. In the Enter The Gungeon each level has over 100 different rooms to give unique effect for each playthrough.</p> <p> </p>"},{"location":"CommandPrompts/","title":"Command Prompts","text":"<p>Configuring exclusions and path offsets for each room can be a complex and time-consuming process. The Enter Exclusions attribute, for example, requires relative FIntPoint values based on the Door Socket Enter location to determine which tiles should not be blocked. This manual process can be streamlined using command prompts to quickly generate FIntPoint data.</p>"},{"location":"CommandPrompts/#directions-for-relative-tile-selection","title":"Directions for Relative Tile Selection","text":"<p>Each direction corresponds to an FIntPoint value:</p> <ul> <li>Up = <code>(X=0, Y=-1)</code></li> <li>Down = <code>(X=0, Y=1)</code></li> <li>Right = <code>(X=1, Y=0)</code></li> <li>Left = <code>(X=-1, Y=0)</code></li> </ul>"},{"location":"CommandPrompts/#command-line-usage","title":"Command Line Usage","text":"<p>The plugin includes several commands to facilitate tile selection and configuration:</p> <ul> <li>GoRight: Copies <code>(X=1, Y=0)</code> to the clipboard.</li> <li>GoLeft: Copies <code>(X=-1, Y=0)</code> to the clipboard.</li> <li>GoDown: Copies <code>(X=0, Y=1)</code> to the clipboard.</li> <li>GoUp: Copies <code>(X=0, Y=-1)</code> to the clipboard.</li> </ul> <p>These commands copy their corresponding FIntPoint data to the clipboard in a platform-agnostic manner. If FIntPoint data is already present in the clipboard, executing a command will update the clipboard with the new summed value. For example:</p> <ul> <li>Initial clipboard data: <code>(X=100, Y=100)</code>.</li> <li>After executing GoRight: Clipboard updates to <code>(X=101, Y=100)</code>.</li> <li>After executing GoDown: Clipboard updates to <code>(X=101, Y=101)</code>.</li> </ul>"},{"location":"CommandPrompts/#copygrid-command","title":"CopyGrid Command","text":"<p>The <code>CopyGrid 'Number' x 'Number'</code> command copies a specified 2D array to the clipboard. For instance:</p> <p><code>CopyGrid 3x3</code> will copy the following array to the clipboard: <code>((X=0, Y=0), (X=0, Y=1), (X=0, Y=2), (X=1, Y=0), (X=1, Y=1), (X=1, Y=2), (X=2, Y=0), (X=2, Y=1), (X=2, Y=2))</code>.</p> <p>This command allows users to generate and copy 2D FIntPoint arrays, which can then be pasted into the Enter &amp; Exit Exclusions or Exit Socket Checks attributes.</p>"},{"location":"CommandPrompts/#utilizing-command-prompts-for-offsetting","title":"Utilizing Command Prompts for Offsetting","text":"<p>While specifying exclusion tiles, you may need to adjust their offsets. The GoUp, GoDown, GoLeft, and GoRight commands are useful for quickly modifying the entire set of exclusion tiles. However, these operations still require manual verification.</p> <p>For more efficient and reliable configuration, using Editor Tools is recommended. These tools provide a user-friendly interface for adjusting room settings directly within the editor, significantly reducing the need for manual testing.</p>"},{"location":"Errors/","title":"Errors","text":"<p>I encourage using the plugin's example rooms and <code>BP_ProGen2</code> as provided when troubleshooting.</p> <p>For technical details, check out the <code>MoveOverlappedRoom</code> function within the <code>ProceduralGen</code> source code.</p> <p>When encountering an overlap, the algorithm attempts to find a suitable spawn point by searching outward in a rectangular pattern. However, this process can be time-consuming for spawning just one room. To address this, I've introduced <code>Max Move Overlapped Room Iterate Normal Room</code> and <code>Max Move Overlapped Room Iterate Branch Room</code>. These settings control the iteration limit for the search loop within the <code>MoveOverlappedRoom</code> function. Be mindful that increasing these values can significantly extend the time it takes to spawn a room.</p> <p>The entire map is structured as a fixed 2D array named <code>Tiles</code> within the <code>ProGen</code> class. Initially, using a fixed 2D array to represent entire map's structure  seemed like a straightforward and simple approach. Now, I'm unsure whether this method is too primitive for such a complex algorithm and questioning whether optimization is even possible or not.</p> <p>I've decided to pause the development of the plugin to further develop my skills in mathematics, algorithms, and optimization techniques.</p> <p>If you see any potential in this plugin, please don't hesitate to contribute. Your insights and contributions would be greatly appreciated.</p>"},{"location":"EssentialChecklist/","title":"Essential Checklist","text":"<p>To start generating maps all the generation scenarios must be covered. For instance if a room expects a certain direction but there's not any room provides the direction, map will not be generated.</p> <p>The Directions will be represented as these images. </p> Direction Image Horizontal Right Horizontal Left Vertical Down Vertical Up No Exit <p>The images and their corresponding directions might felt inverted, but they are not inverted. Consider this room example. </p> <p></p> <p>When   is used, it means The room's Door socket Enter starts with Horizontal Right and ends with Horizontal left.</p> For Socket Enter Horizontal Right  Images Left then Left Left then Up Left then Down Left then Right For Socket Enter Horizontal Left  Images Right then Right Right then Up Right then Down Right then Left For Socket Enter Vertical Down  Images Up then Up Up then Right Up then Left Up then Down For Socket Enter Vertical Up  Images Down then Down Down then Right Down then Left Down then Up For Socket Exit with No Exit  Images Right then No Exit Left then No Exit Up then No Exit Down then No Exit"},{"location":"EssentialChecklist/#room-actor","title":"Room Actor","text":"<ul> <li>Each room actor's Path Start and Path End offsets must be correctly configured to construct the corridors correctly.</li> <li>Each room's Exit Socket Check should be configured to trigger correctly when <code>End Socket</code> blocked.</li> </ul>"},{"location":"Overlaps/","title":"Overlaps","text":"<p>Overlap occurs when the area intended for a new room's entrance overlaps with an existing entity, such as another room, a corridor, or a manually placed <code>BlockRoom</code> used for overlap testing.</p>"},{"location":"Overlaps/#testing-overlaps","title":"Testing Overlaps","text":"<p>To test for overlaps, follow these steps:</p> <ol> <li>In the ProGen actor's debugging section, specify two room actors in <code>Debug Room Sequence</code>. For this walkthrough, use <code>Room23</code> and <code>Room22</code> in that order.<ol> <li>The second room must be in the opposite direction of the first room's exit socket direction. For example, if <code>Room23</code>'s exit direction is <code>Vertical Down</code>, the entrance direction of the second room must be <code>Vertical Up</code>.</li> </ol> </li> <li>Set the <code>Number of Rooms</code> to <code>2</code> to limit the spawn to only these two rooms.</li> <li>Specify classes for <code>Straight Corr Class</code>, <code>Turn Corridor Class</code>, and <code>BlockCube</code>.</li> <li>For manual blocking, place a <code>Block Room</code> in the overlap area. Use runtime observations to identify potential overlap locations. </li> <li>In runtime observe the location of the Second Spawned room. Copy it's location and place the location at  <code>Block Room Locations</code>.</li> </ol> <p>For the given configurations for the ProGen actor, the following results will be given</p> <p> </p>"},{"location":"Overlaps/#handling-overlaps","title":"Handling Overlaps","text":"<p>When an overlap is detected:</p> <ol> <li>The room identifies the tiles it will occupy.</li> <li>If any tile is already marked as blocked, the algorithm triggers an overlap resolution process.</li> <li>The algorithm searches outward in a rectangular pattern to find a suitable spawning tile, subject to several conditions:<ol> <li>The intended tiles for room occupation must not be previously occupied.</li> <li>The room's <code>End Sockets</code> must not overlap with any entity. For details, see End Sockets for Overlap.</li> </ol> </li> </ol> <p>If these conditions are not met, the algorithm triggers an overlap, relocating the room to the nearest available location.</p> <p>For successful relocation, the following must hold:</p> <ol> <li>The intended occupancy tiles must be unoccupied. (There's no object or room in the intended location)</li> <li>The <code>End Sockets</code> must not trigger overlaps. Refer to End Sockets for Overlap for more information.</li> <li>The Buffer size must not collide with existing rooms or corridors.</li> <li>There must be sufficient space for corridor path construction, as shown below:</li> </ol> <p></p> <p>In this example, even though the room appears to be successfully spawned without any overlap, the lack of space for a corridor path prevents final confirmation of the spawn.</p>"},{"location":"Overlaps/#end-socket-overlap","title":"End Socket Overlap","text":"<p>A room may spawn without overlaps, but if it's too close to a blocking object, making corridor path construction impossible, this is considered an end socket overlap. See the example below:</p> <p></p> <p>In this scenario, the first room spawns correctly, but when the second room attempts to spawn at its end socket, it overlaps with a blocking cube. This prevents corridor path construction, as there's insufficient space for the path.</p> <p>Further examples demonstrate the issue:</p> <p></p> <p>To mitigate this, refer to the exit socket check in the Room Actor's details panel and use Command Prompts to assign appropriate exit sockets. (An editor tool for this operation is currently under development.)</p>"},{"location":"SlateEditor/","title":"Editor Tools","text":"<p>The Editor Tools are designed to simplify manual room configuration processes within the plugin. Below are detailed steps on how to utilize these tools effectively.</p>"},{"location":"SlateEditor/#getting-started-with-editor-tools","title":"Getting Started with Editor Tools","text":"<ol> <li>Initiate Tool: Right-click on any folder within the Content Browser (excluding C++ base classes) and select Make very cool Procedural Map label. (The plugin will become more professional manner following core optimization and error resolutions.)</li> </ol> <ol> <li>Tool Window: Upon selection, a window displaying all created rooms will appear, featuring:<ul> <li>Label: The name of each room.</li> <li>Two Images: Representing the Enter and Exit socket directions. For rooms marked as NoExit, an <code>X</code> image will denote the Exit Direction.</li> <li>Disabled Checkbox: Indicates whether all tests are passed for a room (future functionality).</li> <li>Room Selection: Clicking on a room highlights with yellow color compatible rooms for pairing. Use Shift+Click to select a secondary room, revealing a Make Test button.</li> </ul> </li> </ol> <ol> <li>Room Manager: Triggered after selecting two rooms, unless a NoExit room is chosen first. Features include:<ul> <li>Spawn Selected Room: Spawns the first selected room.</li> <li>Navigation: Use <code>W A S D E Q</code> keys and the Scroll Wheel to move and adjust speed within the editor.</li> </ul> </li> </ol> <ol> <li>Start Test: Launches the Block Tile Selection window, allowing for detailed configuration:<ul> <li>Open \"RoomName\": Opens the room's Blueprint editor if box extents are incorrect, with tiles outlined by debug boxes.</li> <li>Start Exclusion: A button to begin tile exclusion selection, with Shift to select and Ctrl to deselect tiles.</li> <li>Save Exclusions: Saves selected exclusions to the blueprint permanently.</li> <li>Test Overlap: Tests overlap with the second selected room, indicating success or failure through color coding.</li> <li>Confirmation Checkbox: Confirms correct block tile exclusion settings for the first room.</li> </ul> </li> </ol> <ol> <li> <p>Corridor Scenario Testing: Initiated by clicking Make Corridor Test With Selected Two Rooms, leading to corridor configuration options.</p> </li> <li> <p>Corridor Scenario Manager: Allows for corridor path creation between the first and second selected rooms, with functionalities to spawn rooms, adjust paths, and restart operations as needed.</p> <ul> <li>Path Selection: Navigate to the End Socket, select tiles for the path using Shift, and deselect with Ctrl.</li> <li>Spawn Room: Confirms the path and spawns the room, with a message box to indicate if the selected tile direction is incorrect.</li> </ul> </li> </ol> <p></p> <p>Upon <code>Spawn Room</code> click.</p> <p></p> <p>Upon successful corridor construction, consider adjusting the Room's Path Start &amp; End Offsets to optimize the layout.</p> <p>These editor tools are designed to streamline the room and corridor configuration process, reducing the need for manual testing and ensuring a smoother development workflow.</p>"},{"location":"References/ProGenActor/","title":"Reference","text":""},{"location":"References/ProGenActor/#general-map-settings-for-procedural-gen","title":"General Map Settings for Procedural Gen","text":"<p>For configuration, navigate to <code>Plugins -&gt; ProceduralMapGeneration Content -&gt; ProceduralMapGeneration -&gt; BP_ProGen2</code>.</p> <ul> <li>RoomDesigns: A collection of rooms available for random selection during map generation.</li> <li>NumberOfRooms: Specifies the total number of rooms to spawn.</li> <li>MaxLargeRoomCount: Defines the maximum number of large rooms that can be spawned.</li> <li>MapSizeX and MapSizeY: Initial map dimensions. Opting for excessively large sizes may adversely affect performance; thus, default settings are recommended.</li> <li>TileSizeX and TileSizeY: Dimensions of tiles, with 16 being the advised default.</li> <li>Map Center: The origin point for room spawning, ideally set to (0,0,0).</li> <li>Buffer Size: The minimum required distance between any two rooms or a room when overlapping occurs, calculated based on tile size and buffer amount.</li> <li>Find corridor path limit: Limits the adjacent tile checks when attempting to spawn an overlapped room.</li> </ul>"},{"location":"References/ProGenActor/#procedural-gen","title":"Procedural Gen","text":"<ul> <li>Max Side Branch Room: Limits the total number of side branch rooms. For details, see Branching and Large Rooms.</li> <li>Straight Corr Class: Assigns the straight corridor actor.</li> <li>Turn Corridor Class: Assigns the turn corridor actor.</li> <li>Max Move Overlapped Room Iterate: Here is the critical part completely crippling entire plugin's functionality. Refer to the Errors page.</li> </ul>"},{"location":"References/ProGenActor/#debugging","title":"Debugging","text":"<ul> <li>Debug Room Sequence: When specified, spawns only the rooms listed in the array, bypassing the procedural generation.</li> <li>Block Room Locations: Identifies locations for spawning block actors, useful in overlap testing scenarios.</li> <li>Block Room: The default actor used for blocking; the BlockCube is generally sufficient.</li> <li>Visualize Overlaps: Highlights blocked areas with yellow debug boxes, useful for identifying blocked tiles but may impact performance.</li> <li>Visualize Visited: Placeholder for a forgotten functionality.</li> <li>Visualize Begin and End Tiles: Shows the starting and ending points of corridors in blue boxes for rooms that initially overlapped and were subsequently moved.</li> <li>Visualize Corridor Path: Outlines the corridor path in red, aiding in corridor pattern analysis.</li> <li>Visualize All Exclusions: Complements <code>Visualize Overlaps</code> by specifically highlighting excluded tiles.</li> <li>Visualize End Socket Overlap Check: Displays end socket overlaps, with settings adjustable in the Room Actor.</li> <li>Spawn Corridor: Should always be enabled, with plans for future removal.</li> </ul>"},{"location":"References/ProGenActor/#corridor-path-finding","title":"Corridor Path Finding","text":"<ul> <li>Apply Turn Penalty: Disabling this option omits turn penalties, which are vital for minimizing zigzag patterns.</li> <li>Turn Penalty Amount: Specifies the penalty for pathfinding turns, with 10 set as the default value.</li> </ul>"},{"location":"References/RoomActor/","title":"Room Actor","text":"<p>The Room Actor settings are crucial for defining room characteristics and behaviors within the procedural generation process.</p> <ul> <li>Large Room: Marking a room as a \"Large Room\" categorizes it for specific branching behaviors. For detailed information, refer to Branching and Large Room.</li> <li>No Exit: Indicates rooms that have an entrance but lack an exit. Such rooms are  used to terminate branches in a large room scenario.</li> <li>Path Start Offset &amp; Path End Offset: Adjusts the starting or ending points of corridors to avoid overlaps. For more details, see Overlaps.</li> <li>Visualize Blocked: Enables visualization of blocked tiles within the room, aiding in the configuration process.</li> <li>Enter Socket Direction &amp; Exit Socket Direction: Specifies the orientation of the room's entrance and exit. Ensure alignment with the room's physical layout. For configuration guidance, refer to Getting Started.</li> </ul>"},{"location":"References/RoomActor/#door-configuration","title":"Door Configuration","text":"<ul> <li>Enter Door: Select and spawn the door actor at the <code>Door Socket Enter</code> location to define the room's entrance.</li> <li>Exit Door: Similarly, select and spawn the door actor at the <code>Door Socket Exit</code> location to establish the room's exit.</li> </ul>"},{"location":"References/RoomActor/#exclusions","title":"Exclusions","text":"<ul> <li>Enter Exclusions and Exit Exclusions: Define tiles to be excluded from room placement or corridor connections using <code>FIntPoint</code> values. Manual entry is not recommended; instead, use the Slate Editor for a more intuitive configuration process.</li> </ul>"},{"location":"References/RoomActor/#exit-socket-check","title":"Exit Socket Check","text":"<p>Occasionally, a room may spawn without overlap, yet its placement impedes the spawning of subsequent rooms due to insufficient space for corridor connection. This scenario necessitates careful consideration of exit socket positions to ensure connectivity.</p> <p></p> <p>In the illustrated example, despite the absence of overlap for the first room, the attempted placement of a second room results in a conflict, illustrating the importance of exit socket checks. For comprehensive guidance, refer to Slate.</p> <ul> <li>Exit Socket Checks: Specifies tiles around exit sockets that must remain clear to allow for corridor initiation, defined using <code>FIntPoint</code>.</li> <li>Exit Socket Check Offset: Adjusts the positioning of tiles designated by \"Exit Socket Checks\" to mitigate potential overlap issues. For additional information, consult Overlapping.</li> </ul>"}]}